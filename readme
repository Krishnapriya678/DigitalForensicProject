const express = require('express');
const session = require('express-session');
const bcrypt = require('bcryptjs');
const mongoose = require('mongoose');
const connectMongo = require('connect-mongo');

mongoose.connect(`mongodb+srv://<db_username>:<db_password>@<db_name>.cluster0.net/<db_name>?retryWrites=true&w=majority`, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB connected');
}).catch((error) => {
  console.log(`MongoDB connection error: ${error}`);
});

const userSchema = new mongoose.Schema({
    username: { type: String, required: true },
    email: { type: String, required: true },
    password: { type: String, required: true },
  });

  const User = mongoose.model('User', userSchema);




  app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
  
    // Check if the user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(409).json({ message: 'User already exists' });
    }
  
    // Hash the password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
  
    // Create a new user
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });
  
    await newUser.save();
  
    req.session.user = newUser;
    res.json(newUser);
  });





  

      app.post('/login', async (req, res) => {
        const { email, password } = req.body;
      
        // Check if the user exists
        const user = await User.findOne({ email });
        if (!user) {
          return res.status(401).json({ message: 'Invalid email or password' });
        }
      
        // Check if the password is correct
        const isPasswordCorrect = await bcrypt.compare(password, user.password);
        if (!isPasswordCorrect) {
          return res.status(401).json({ message: 'Invalid email or password' });
        }
      
        // If email and password are correct, create a JWT token
        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);
      
        // Set the JWT token as a cookie in the response
        res.cookie('token', token, { httpOnly: true });
      
        // Return the user information without the password
        return res.json({ user: { _id: user._id, email: user.email, name: user.name } });
      });
  